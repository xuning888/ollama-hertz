// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/tmc/langchaingo/llms/ollama"
	"github.com/xuning888/ollama-hertz/internal/controller"
	"github.com/xuning888/ollama-hertz/internal/dal"
	"github.com/xuning888/ollama-hertz/internal/service"
	"github.com/xuning888/ollama-hertz/pkg/config"
	"net/http"
)

func init() {
	config.Init()
	dal.Init()
}

func initLLM() *ollama.LLM {
	llm, err := ollama.New(
		ollama.WithModel(config.DefaultConfig.LlmModel),
		ollama.WithServerURL(config.DefaultConfig.OllmServerUrl),
	)
	if err != nil {
		hlog.Infof("load model failed model: %v error: %v", config.DefaultConfig.LlmModel, err)
		panic(err)
	}
	return llm
}

func Register(hertz *server.Hertz) {
	// chat
	llm := initLLM()
	chatService := service.NewChatService(llm)
	chatController := controller.NewChatController(chatService)
	chatController.Register(hertz)

	// prompt
	promptService := service.NewPromptService()
	promptController := controller.NewPromptController(promptService)
	promptController.Register(hertz)
}

func main() {
	hertz := server.Default(server.WithHostPorts(config.DefaultConfig.ServerPort))

	hertz.Static("/", "static/")
	Register(hertz)

	// 重定向到index.html
	hertz.GET("/", func(c context.Context, ctx *app.RequestContext) {
		ctx.Redirect(http.StatusOK, []byte("/index.html"))
		return
	})
	hertz.Spin()
}
